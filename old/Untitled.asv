% this m-file generates some simulated data and then compares various
% algorithms for inferring calcium and spike times.  in particular, we
% start with:
%
% 1) dF/F and threshold
% 2) projection pursuit regression

%% start function
clear; clc; figure(1), clf,

[Sim P] = InitializeStuff;

%% set simulation parameters
Sim.Nsec    = 1;                       %# of sec
Sim.freq    = 1;                        %not intermittent
Sim.T       = round(Sim.Nsec/Sim.dt);   %total # of steps (round deals with numerical error)
Sim.T_o     = round(Sim.T/Sim.freq);    %number of observations (round deals with numerical error)
Sim.tvec    = Sim.dt:Sim.dt:Sim.Nsec;   %time vector
Sim.tvec_o  = Sim.tvec(Sim.freq:Sim.freq:Sim.T);
Sim.M       = 1;                        %# spike history terms
Sim.StimDim = 1;                        %# stimulus dimenstions
Sim.pf      = 1;
Sim.x       = ones(Sim.StimDim,Sim.T);  %stimulus

epsilon_c   = P.sigma_c*sqrt(Sim.dt)*randn(1,Sim.T);%generate noise on calcium
rate        = 5;                       %desired firing rate in the simuation
P.k         = log(-log(1-rate*Sim.Nsec/Sim.T)/Sim.dt);%constant to set baseline firing rate
sp_thres    = exp(-exp(P.k)*Sim.dt);    %expected firing rate
ex_n_sp     = 15;%Sim.T*(1-sp_thres);       %expected # of spikes
% spt         = rand(1,Sim.T)>sp_thres;   %spike in 10% of time bins
P.C_0       = 0.0;                      %resting calcium level
P.C_init    = P.C_0;                    %initial calcium

R.n         = zeros(1,Sim.T);           %spike times
R.C         = P.C_init*ones(1,Sim.T);   %thrialize calcium
R.n([50 102 154])    = 1;                        %force spikes
for t=2:Sim.T                           %update calcium
    R.C(t)  = (1-P.a)*R.C(t-1) + P.A*R.n(t) + P.a*P.C_0 + epsilon_c(t);
end
% R.F         = R.C + .1*randn(1,Sim.T);
F_mu        = P.alpha*Hill_v1(P,R.C)+P.beta;    %compute E[F_t]
F_var       = P.gamma*Hill_v1(P,R.C)+P.zeta;    %compute V[F_t]
R.F         = F_mu+sqrt(F_var).*randn(1,Sim.T); %add noise to observations
R.F(R.F<0)  = eps;                              %observations must be non-negative
% R           = smc_em_bern_real_exp_v5(Sim,P);

kern_conv   = false;            %estimated kernel has not converged
zeroTo      = zeros(1,Sim.T_o); %vector of zeros for speeding things up
zeroT       = zeros(1,Sim.T);   %vector of zeros for speeding things up
old_resid_se= Inf;              %init old residual square error for comparison purposes

kern_conv       = false;            %estimated kernel has not converged
zeroy           = zeros(1,Sim.T);   %vector of zeros for speeding things up
old_resid_se    = inf;              %init old residual square error for comparison purposes
gray            = [0.75 0.75 0.75];

%     if j==1
P.gamma     = P.gamma*10^-1;
P.zeta      = P.zeta*10^-1;
%     else
% P.gamma     = P.gamma*10^2;
% P.zeta      = P.zeta*10^2;
%     end
%% generate data
F_mu        = P.alpha*Hill_v1(P,R.C)+P.beta;    %compute E[F_t]
F_var       = P.gamma*Hill_v1(P,R.C)+P.zeta;    %compute V[F_t]
R.F         = F_mu+sqrt(F_var).*randn(1,Sim.T); %add noise to observations
R.F(R.F<0)  = eps;                              %observations must be non-negative
F           = InvHill(R.F(Sim.freq:Sim.freq:Sim.T),P.n,P.k_d);

maxy        = 1;
maxC        = .2;
%     maxF        = max(F);%
maxF        = ceil(max(F)*10)/10;
%%
% GetThrFig
% plot actual and inferred spikes and smoothed trains

%residual

% thrialize some stuff
ppr_nT  = zeroT;                                %estimated spike train using T time steps
ppr_nTo = zeroTo;                               %estimated spike train using T_o time steps
kern    = P.A*exp(-Sim.tvec/P.tau_c);                 %calcium kernel
kerns   = zeros(Sim.freq,Sim.T_o);              %subsampled kernel
for k=1:Sim.freq
    kerns(k,:) = kern(k:Sim.freq:end);
end
resid   = [F zeroTo];                           %residual error (padded with zeros)
resid_se= sum(resid.^2);                        %residual squared error
Mn      = zeroTo;                               %estimated spike train filtered with kernel

% sp_conv = false;                                %variable for converging on spikes using this kernel
%     for  ii=1:3
% ii=0;
nrows1=5;
% while sp_conv == false
%     ii=ii+1;
% update spike train
krx = xcorr(kerns(1,:),resid);
[sp_xcor sp_ind2] = max(xcorr(kerns(1,:),resid));%get time of next spike
indT_o          = 2*Sim.T_o-sp_ind2;        %fix index (because xcorr does things backwards and pads with zeros
if indT_o <= 0
    indT_o = 1;
end

k_ind       = 1;                            %just assume the first thing
indT        = indT_o*Sim.freq+k_ind-1;      %index of spike according to T (as opposed to T_o)

% update Mn
new_Mn      =[zeros(1,indT_o) kerns(k_ind,1:end-indT_o)];%fast way to get convolved new spike with kernel
new_resid   = resid(1:Sim.T_o) - new_Mn;    %update new residual
if resid_se > sum(new_resid.^2)%+1/(ex_n_sp/Sim.Nsec)%if adding a spike REDUCES residual square error
    resid(1:Sim.T_o)= new_resid;            %update the estimate of the residuals
    resid_se        = sum(resid.^2);        %udate residual square error
    Mn              = Mn + new_Mn;          %update Mn
    ppr_nT(indT)    = 1;                    %update the estimated spike trai
    ppr_nTo(indT_o) = 1;                    %incorporate into new spike train
else                                        %if adding new spike INCREASES residual square error
    sp_conv=true;                           %stop adding spikes for this kernel
    new_resid_se = resid_se;                %store best residual achieved with this kernel
end

fs = 14;
figure(1), clf
%fluorescence
subplot(nrows1,1,1), hold on,
plot(Sim.tvec_o,R.F(Sim.freq:Sim.freq:Sim.T),'-','color','k','linewidth',2),
axis('tight');%  axis([0 Sim.Nsec 0 maxF])
set(gca,'YTick',[],'YTickLabel',[],'XTick',[.2:.2:1],'XTickLabel',[])
ylab=ylabel([{'$F_t$'}; {'(a.u.)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle','FontSize',fs)%

%xcorr of spike train and calcium kernel
subplot(nrows1,1,2), hold on,
plot(Sim.tvec,R.C,'Color',gray,'linewidth',2)
axis([0 Sim.Nsec 0 maxC])
set(gca,'YTick',[],'YTickLabel',[],'XTick',[.2:.2:1],'XTickLabel',[])
ylab=ylabel([{'$[Ca^{2+}]_t$'}; {'($\mu$M)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle','FontSize',fs)%

%actual and smoothed spike train
subplot(nrows1,1,3), hold on, 
bar(Sim.tvec,R.n,'FaceColor','k','EdgeColor','k','BarWidth',2)
axis([0 Sim.Nsec 0 1])
set(gca,'XTick',[.2:.2:1],'XTickLabel',[],'YTick',[])
ylab=ylabel([{'$n_t$'}; {'($\#$)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle','FontSize',fs)%,'color',col(2,:),'fontsize',yfs);%,'Interpreter','latex','FontName','Arial')

%convolved spike train
subplot(nrows1,1,4), hold on,
plot(Sim.tvec, new_Mn,'color','k','linewidth',2), hold off,
axis('tight')
set(gca,'XTick',[.2:.2:1],'XTickLabel',[],'YTick',[])
ylab=ylabel([{'$n_{t^i} \ast e_{A,\tau_c}$'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle','FontSize',fs)%,'color',col(2,:),'fontsize',yfs);%,'Interpreter','latex','FontName','Arial')

%residual
subplot(nrows1,1,5), hold on,
plot(Sim.tvec(Sim.freq:Sim.freq:Sim.T),new_resid,'-','color','k','linewidth',2),
axis('tight'); %axis([0 Sim.Nsec 0 maxF])
set(gca,'XTick',[.2:.2:1],'YTickLabel',[],'YTick',[],'FontSize',fs)
xlabel('Time (sec)','FontSize',fs)
ylab=ylabel([{'$r^i = F_t - n_{t^i} \ast e_{A,\tau_c}$'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle','FontSize',fs)%,'color',col(2,:),'fontsize',yfs);%,'Interpreter','latex','FontName','Arial')

fig=figure(1);
wh=[5 5];   %width and height
set(fig,'PaperPosition',[0 11-wh(2) wh]);
print -depsc C:\D\working_copies\neur_ca_imag\trunk\yustelab_talk\ppr_schem
% end