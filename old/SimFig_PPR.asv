% this m-file generates some simulated data and then compares various
% algorithms for inferring calcium and spike times.  in particular, we
% start with:
%
% 1) dF/F and threshold
% 2) projection pursuit regression

%% start function
clear; clc; figure(1), clf, figure(2), clf, figure(3), clf

[Sim P] = InitializeStuff;

%% set simulation parameters
Sim.Nsec    = 1;                       %# of sec
Sim.freq    = 1;                        %not intermittent
Sim.T       = round(Sim.Nsec/Sim.dt);   %total # of steps (round deals with numerical error)
Sim.T_o     = round(Sim.T/Sim.freq);    %number of observations (round deals with numerical error)
Sim.tvec    = Sim.dt:Sim.dt:Sim.Nsec;   %time vector
Sim.M       = 1;                        %# spike history terms
Sim.StimDim = 1;                        %# stimulus dimenstions
Sim.pf      = 1;
Sim.x       = ones(Sim.StimDim,Sim.T);  %stimulus

epsilon_c   = P.sigma_c*sqrt(Sim.dt)*randn(1,Sim.T);%generate noise on calcium
rate        = 5;                       %desired firing rate in the simuation
P.k         = log(-log(1-rate*Sim.Nsec/Sim.T)/Sim.dt);%constant to set baseline firing rate
sp_thres    = exp(-exp(P.k)*Sim.dt);    %expected firing rate
ex_n_sp     = 15;%Sim.T*(1-sp_thres);       %expected # of spikes
% spt         = rand(1,Sim.T)>sp_thres;   %spike in 10% of time bins
P.C_0       = 0.0;                      %resting calcium level
P.C_init    = P.C_0;                    %initial calcium

R.n         = zeros(1,Sim.T);           %spike times
R.C         = P.C_init*ones(1,Sim.T);   %thrialize calcium
R.n([50 102 154])    = 1;                        %force spikes
for t=2:Sim.T                           %update calcium
    R.C(t)  = (1-P.a)*R.C(t-1) + P.A*R.n(t) + P.a*P.C_0 + epsilon_c(t);
end
% R.F         = R.C + .1*randn(1,Sim.T);
F_mu        = P.alpha*Hill_v1(P,R.C)+P.beta;    %compute E[F_t]
F_var       = P.gamma*Hill_v1(P,R.C)+P.zeta;    %compute V[F_t]
R.F         = F_mu+sqrt(F_var).*randn(1,Sim.T); %add noise to observations
R.F(R.F<0)  = eps;                              %observations must be non-negative
% R           = smc_em_bern_real_exp_v5(Sim,P);

kern_conv   = false;            %estimated kernel has not converged
zeroTo      = zeros(1,Sim.T_o); %vector of zeros for speeding things up
zeroT       = zeros(1,Sim.T);   %vector of zeros for speeding things up
old_resid_se= Inf;              %init old residual square error for comparison purposes

kern_conv       = false;            %estimated kernel has not converged
zeroy           = zeros(1,Sim.T);   %vector of zeros for speeding things up
old_resid_se    = inf;              %init old residual square error for comparison purposes
gray            = [0.75 0.75 0.75];

for j=1:2
    if j==1
        P.gamma     = P.gamma*10^-1;
        P.zeta      = P.zeta*10^-1;
    else
        P.gamma     = P.gamma*10^2;
        P.zeta      = P.zeta*10^2;
    end
    %% generate data
    F_mu        = P.alpha*Hill_v1(P,R.C)+P.beta;    %compute E[F_t]
    F_var       = P.gamma*Hill_v1(P,R.C)+P.zeta;    %compute V[F_t]
    R.F         = F_mu+sqrt(F_var).*randn(1,Sim.T); %add noise to observations
    R.F(R.F<0)  = eps;                              %observations must be non-negative
    F           = InvHill(R.F(Sim.freq:Sim.freq:Sim.T),P.n,P.k_d);

    maxy        = 1;
    maxC        = .2;
    maxF        = ceil(max(F)*10)/10;
    %%
    % GetThrFig
    % plot actual and inferred spikes and smoothed trains

    %residual

    % thrialize some stuff
    ppr_nT  = zeroT;                                %estimated spike train using T time steps
    ppr_nTo = zeroTo;                               %estimated spike train using T_o time steps
    kern    = P.A*exp(-Sim.tvec/P.tau_c);                 %calcium kernel
    kerns   = zeros(Sim.freq,Sim.T_o);              %subsampled kernel
    for k=1:Sim.freq
        kerns(k,:) = kern(k:Sim.freq:end);
    end
    resid   = [F zeroTo];                           %residual error (padded with zeros)
    resid_se= sum(resid.^2);                        %residual squared error
    Mn      = zeroTo;                               %estimated spike train filtered with kernel

    sp_conv = false;                                %variable for converging on spikes using this kernel
    %     for  ii=1:3
    ii=0;
    while sp_conv == false
        ii=ii+1;
        % update spike train
        [sp_xcor sp_ind2] = max(xcorr(kerns(1,:),resid));%get time of next spike
        indT_o          = 2*Sim.T_o-sp_ind2;        %fix index (because xcorr does things backwards and pads with zeros
        if indT_o <= 0
            indT_o = 1;
        end

        k_ind       = 1;                            %just assume the first thing
        indT        = indT_o*Sim.freq+k_ind-1;      %index of spike according to T (as opposed to T_o)

        % update Mn
        new_Mn      =[zeros(1,indT_o-1) kerns(k_ind,1:end-indT_o+1)];%fast way to get convolved new spike with kernel
        new_resid   = resid(1:Sim.T_o) - new_Mn;    %update new residual
        if resid_se > sum(new_resid.^2)%+1/(ex_n_sp/Sim.Nsec)%if adding a spike REDUCES residual square error
            resid(1:Sim.T_o)= new_resid;            %update the estimate of the residuals
            resid_se        = sum(resid.^2);        %udate residual square error
            Mn              = Mn + new_Mn;          %update Mn
            ppr_nT(indT)    = 1;                    %update the estimated spike trai
            ppr_nTo(indT_o) = 1;                    %incorporate into new spike train
        else                                        %if adding new spike INCREASES residual square error
            sp_conv=true;                           %stop adding spikes for this kernel
            new_resid_se = resid_se;                %store best residual achieved with this kernel
        end

        %         if j==1
        %             figure(ii), clf, nrows1=4; gray=[0.75 0.75 0.75];
        %
        %             % calcium
        %             subplot(nrows1,1,1), hold on,
        %             plot(Sim.tvec, R.C,'color',gray,'linewidth',2)
        %             ylab=ylabel([{'$[\textrm{Ca}^{2+}]_t$'}; {'($\mu$ M)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
        %             % ylab=ylabel({'[Ca^2^+]_t';'\mu M'},'Interpreter','Latex'),
        %             axis([0 Sim.Nsec 0 maxC]), %legend('real','ppr','Location','EastOutside')
        %             set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%
        %             set(gca,'XTickLabel',[])%,'YTick',[0 1])
        %             set(gca,'YTickLabel',[0 maxC],'YTick',[0 maxC])
        %
        %             %fluorescence
        %             subplot(nrows1,1,2), hold on,
        %             plot(Sim.tvec(Sim.freq:Sim.freq:Sim.T),R.F(Sim.freq:Sim.freq:Sim.T),'-','color','k','linewidth',2),
        %             ylab=ylabel([{'$F_t$'}; {'(a.u.)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
        %             axis([0 Sim.Nsec 0 maxF])
        %             set(gca,'YTickLabel',[0 maxF],'YTick',[0 maxF])
        %             xlabel('Time (sec)')
        %             set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%
        %
        %
        %             %actual and smoothed spike train
        %             subplot(nrows1,1,3), hold on, bar(Sim.tvec,ppr_nT,'FaceColor',gray,'EdgeColor',gray,'BarWidth',2)
        %             % subplot(nrows1,1,i), plot(Sim.tvec, smooth_real_n,'color',gray), hold off, axis('tight')
        %             ylab=ylabel([{'$n_t$'}; {'($\#$)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
        %             axis([0 Sim.Nsec 0 1])
        %             set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%,'color',col(2,:),'fontsize',yfs);%,'Interpreter','latex','FontName','Arial')
        %             set(gca,'XTickLabel',[],'YTick',[0 1])
        %
        %             subplot(nrows1,1,4), hold on,
        %             plot(Sim.tvec(Sim.freq:Sim.freq:Sim.T),new_resid,'-','color','k','linewidth',2),
        %             ylab=ylabel([{'Residual'}; {'(a.u.)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
        %             axis([0 Sim.Nsec 0 maxF])
        %             set(gca,'YTickLabel',[0 maxF],'YTick',[0 maxF])
        %             xlabel('Time (sec)')
        %             set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%
        %
        %             fig=figure(ii);
        %             wh=[5 3];   %width and height
        %             set(fig,'PaperPosition',[0 11-wh(2) wh]);
        %             filename = ['C:\D\working_copies\neur_ca_imag\trunk\janelia_talk\ppr', num2str(ii)];
        %             print('-depsc',filename)
        %         end

    end


    %     subplot(nrows1,1,3), hold on,
    %     plot(Sim.tvec(Sim.freq:Sim.freq:Sim.T),R.F(Sim.freq:Sim.freq:Sim.T),'.','color','k'),
    %     ylab=ylabel([{'Residual'}; {'(a.u.)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
    %     axis([0 Sim.Nsec 0 .2])
    %     set(gca,'YTickLabel',[0 .2],'YTick',[0 .2])
    %     xlabel('Time (sec)')
    %     set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%
    %
    %     %dF and threshold
    %     dF          = diff(F);    %get dF
    %     [sdF ind]   = sort(dF);     %sort dF
    %     subplot(nrows1,1,4), hold on,
    %     plot(Sim.tvec(Sim.freq:Sim.freq:Sim.T-1),dF,'.-','color','k'),
    %     plot(Sim.tvec,sdF(round(Sim.T_o*sp_thres)),'k'),
    %     set(gca,'YTick',[-maxF .1 ],'XTickLabel',[])
    %     axis([0 Sim.Nsec -.1 .15])
    %     box off
    %     ylab=ylabel([{'$dF_t$'}; {'(a.u.)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
    %     set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%
    %
    %     if j==1
    %         print -depsc C:\D\working_copies\neur_ca_imag\trunk\janelia_talk\ppr2
    %     end
    %     %%
    %
    figure(3), Ncols=2; Nrows=4;

    %%
    gauss_smooth    = exp(-((linspace(-5,5,Sim.T)/.3).^2)); %smoothing gaussian kernel
    smooth_real_n   = conv2(R.n,gauss_smooth,'same');       %tru spike train smoothed

    smooth_ppr_n    = conv2(ppr_nT,gauss_smooth,'same');
    ppr_errs    = (smooth_real_n-smooth_ppr_n).^2;
    ppr_mean    = mean(ppr_errs);                       %compute mse
    ppr_var     = var(ppr_errs)*20;                     %compute var


    % use dF and threshold method to find spike times, and smooth
    dF              = diff(R.F);                            %get dF
    [sdF ind]       = sort(dF);                             %sort dF
    sp_thres        = 1-ex_n_sp/Sim.T;                      %threshold based on expected number of spikes
    sp_ind          = ind(end-2:end);       %find top (1-sp_thres)% of spikes
    thr_n           = zeros(1,Sim.T);                       %extize thrial guess of where spikes are
    thr_n(sp_ind)   = 1;                                    %make vector of 1's where spikes are
    smooth_thr_n    = conv2(thr_n,gauss_smooth,'same');     %smooth spike train with gaussian
    thr_errs        = (smooth_real_n-smooth_thr_n).^2;
    thr_mean        = mean(thr_errs);                       %compute mse
    thr_var         = var(thr_errs)*20;                     %compute var

    subplot(Nrows,Ncols,j), hold on,
    plot(Sim.tvec(Sim.freq:Sim.freq:Sim.T),R.F(Sim.freq:Sim.freq:Sim.T),'.','color','k'),
    if j==1
        ylab=ylabel([{'$F_t$'}; {'(a.u.)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
        set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%
        title('Low Noise')
    else
        title('High Noise')
    end
    set(gca,'YTickLabel',[0 .2],'YTick',[0 .2],'XTickLabel',[])
    axis([0 Sim.Nsec 0 .2])

    %actual and smoothed spike train
    subplot(Nrows,Ncols,j+2), hold on, bar(Sim.tvec,R.n,'FaceColor',gray,'EdgeColor',gray,'BarWidth',2)
    subplot(Nrows,Ncols,j+2), plot(Sim.tvec, smooth_real_n,'color',gray), hold off, axis('tight')
    if j==1
        ylab=ylabel([{'True'}; {'Spike Train'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
        set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%,'color',col(2,:),'fontsize',yfs);%,'Interpreter','latex','FontName','Arial')
    end
    set(gca,'YTick',[0 maxy],'XTickLabel',[])
    axis([0 Sim.Nsec 0 maxy])

    % dF/F and threshold guess of spike train (and smoothed)
    subplot(Nrows,Ncols,j+4), hold on, bar(Sim.tvec,thr_n,'FaceColor','r','EdgeColor','r'),
    subplot(Nrows,Ncols,j+4), plot(Sim.tvec, smooth_thr_n,'r'), hold off,
    if j==1
        ylab=ylabel([{'dF and'}; {'threshold'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
        set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%,'color',col(2,:),'fontsize',yfs);%,'Interpreter','latex','FontName','Arial')
    end
    set(gca,'XTickLabel',[])%,'YTick',[0 1 2 maxy])
    axis([0 Sim.Nsec 0 maxy])

    % ppr guess of spike train (and smoothed)
    subplot(Nrows,Ncols,j+6), hold on, bar(Sim.tvec,ppr_nT,'FaceColor','b','EdgeColor','b'),
    subplot(Nrows,Ncols,j+6), plot(Sim.tvec, smooth_ppr_n,'b'), hold off,
    if j==1
        ylab=ylabel([{'PPR'}; ],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
        set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%,'color',col(2,:),'fontsize',yfs);%,'Interpreter','latex','FontName','Arial')
    end
    %     set(gca,'XTickLabel',[])%,'YTick',[0 1 2 maxy])
    axis([0 Sim.Nsec 0 maxy])
    xlabel('Time (sec)')
end


fig=figure(3);
wh=[5 5];   %width and height
set(fig,'PaperPosition',[0 11-wh(2) wh]);
print -depsc C:\D\working_copies\neur_ca_imag\trunk\janelia_talk\thr_ppr_comp