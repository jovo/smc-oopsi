% this m-file generates some simulated data and then compares various
% algorithms for inferring calcium and spike times.  in particular, we
% start with:
%
% 1) dF/F and threshold
% 2) projection pursuit regression

%% start function
clear; clc; figure(1), clf, figure(2), clf, figure(3), clf

[Sim P] = InitializeStuff;

%% set simulation parameters
Sim.Nsec    = 5;                       %# of sec
Sim.freq    = 5;                        %not intermittent
Sim.T       = round(Sim.Nsec/Sim.dt);   %total # of steps (round deals with numerical error)
Sim.T_o     = round(Sim.T/Sim.freq);    %number of observations (round deals with numerical error)
Sim.tvec    = Sim.dt:Sim.dt:Sim.Nsec;   %time vector
Sim.M       = 1;                        %# spike history terms
Sim.StimDim = 1;                        %# stimulus dimenstions
Sim.pf      = 1;
Sim.x       = ones(Sim.StimDim,Sim.T);  %stimulus

epsilon_c   = P.sigma_c*sqrt(Sim.dt)*randn(1,Sim.T);%generate noise on calcium
rate        = 15;                       %desired firing rate in the simuation
P.k         = log(-log(1-rate*Sim.Nsec/Sim.T)/Sim.dt);%constant to set baseline firing rate
sp_thres    = exp(-exp(P.k)*Sim.dt);    %expected firing rate
ex_n_sp     = 15;%Sim.T*(1-sp_thres);       %expected # of spikes
% spt         = rand(1,Sim.T)>sp_thres;   %spike in 10% of time bins
P.C_0       = 0.0;                      %resting calcium level
P.C_init    = P.C_0;                    %initial calcium

R           = smc_em_bern_real_exp_v5(Sim,P);

for j=1:2
    if j==1
        P.gamma     = P.gamma*10^-1;
        P.zeta      = P.zeta*10^-1;
    else
        P.gamma     = P.gamma*10^2;
        P.zeta      = P.zeta*10^2;
    end
    %% generate data
    F_mu        = P.alpha*Hill_v1(P,R.C)+P.beta;    %compute E[F_t]
    F_var       = P.gamma*Hill_v1(P,R.C)+P.zeta;    %compute V[F_t]
    R.F         = F_mu+sqrt(F_var).*randn(1,Sim.T); %add noise to observations
    R.F(R.F<0)  = eps;                              %observations must be non-negative
    F           = R.F(Sim.freq:Sim.freq:Sim.T);

    %%
    % GetThrFig
    % plot actual and inferred spikes and smoothed trains
    figure(j), clf, nrows1=4; gray=[0.75 0.75 0.75];

    %actual and smoothed spike train
    subplot(nrows1,1,1), hold on, bar(Sim.tvec,R.n,'FaceColor',gray,'EdgeColor',gray,'BarWidth',2)
    % subplot(nrows1,1,i), plot(Sim.tvec, smooth_real_n,'color',gray), hold off, axis('tight')
    ylab=ylabel([{'$n_t$'}; {'($\#$)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
    axis('tight')
    set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%,'color',col(2,:),'fontsize',yfs);%,'Interpreter','latex','FontName','Arial')
    set(gca,'XTickLabel',[],'YTick',[0 1])

    % calcium
    subplot(nrows1,1,2), hold on,
    plot(Sim.tvec, R.C,'color',gray,'linewidth',2)
    ylab=ylabel([{'$[\textrm{Ca}^{2+}]_t$'}; {'($\mu$ M)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
    % ylab=ylabel({'[Ca^2^+]_t';'\mu M'},'Interpreter','Latex'),
    axis('tight'), %legend('real','ppr','Location','EastOutside')
    set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%
    set(gca,'XTickLabel',[])%,'YTick',[0 1])
    set(gca,'YTickLabel',[0 .2],'YTick',[0 .2])

    %fluorescence
    subplot(nrows1,1,3), hold on,
    plot(Sim.tvec(Sim.freq:Sim.freq:Sim.T),R.F(Sim.freq:Sim.freq:Sim.T),'.','color','k'),
    ylab=ylabel([{'$F_t$'}; {'(a.u.)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
    axis([0 5 0 .2])
    set(gca,'YTickLabel',[0 .2],'YTick',[0 .2])
    xlabel('Time (sec)')
    set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%

    %dF and threshold
    dF          = diff(F);    %get dF
    [sdF ind]   = sort(dF);     %sort dF
    subplot(nrows1,1,4), hold on,
    plot(Sim.tvec(Sim.freq:Sim.freq:Sim.T-1),dF,'.-','color','k'),
    plot(Sim.tvec,sdF(round(Sim.T_o*sp_thres)),'k'),
    set(gca,'YTick',[-.1 .1 ],'XTickLabel',[])
    axis([0 5 -.1 .15])
    box off
    ylab=ylabel([{'$dF_t$'}; {'(a.u.)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
    set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%

    if j==1
        print -depsc C:\D\working_copies\neur_ca_imag\trunk\janelia_talk\thr2
    end
    %%

    figure(3), Ncols=2; Nrows=3;

    %%
    gauss_smooth    = exp(-((linspace(-5,5,Sim.T)/.3).^2)); %smoothing gaussian kernel
    smooth_real_n   = conv2(R.n,gauss_smooth,'same');       %tru spike train smoothed

    % use dF and threshold method to find spike times, and smooth
    dF              = diff(R.F);                            %get dF
    [sdF ind]       = sort(dF);                             %sort dF
    sp_thres        = 1-ex_n_sp/Sim.T;                      %threshold based on expected number of spikes
    sp_ind          = ind(round(Sim.T*sp_thres):end);       %find top (1-sp_thres)% of spikes
    thr_n           = zeros(1,Sim.T);                       %extize thrial guess of where spikes are
    thr_n(sp_ind)   = 1;                                    %make vector of 1's where spikes are
    smooth_thr_n    = conv2(thr_n,gauss_smooth,'same');     %smooth spike train with gaussian
    thr_errs        = (smooth_real_n-smooth_thr_n).^2;
    thr_mean        = mean(thr_errs);                       %compute mse
    thr_var         = var(thr_errs)*20;                     %compute var

    subplot(Nrows,Ncols,j), hold on,
    plot(Sim.tvec(Sim.freq:Sim.freq:Sim.T),R.F(Sim.freq:Sim.freq:Sim.T),'.','color','k'),
    if j==1
        ylab=ylabel([{'$F_t$'}; {'(a.u.)'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
        set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%
        title('Low Noise')
    else
        title('High Noise')
    end
    set(gca,'YTickLabel',[0 .2],'YTick',[0 .2])
    axis([0 5 0 .2])

    %actual and smoothed spike train
    subplot(Nrows,Ncols,j+2), hold on, bar(Sim.tvec,R.n,'FaceColor',gray,'EdgeColor',gray,'BarWidth',2)
    subplot(Nrows,Ncols,j+2), plot(Sim.tvec, smooth_real_n,'color',gray), hold off, axis('tight')
    if j==1
        ylab=ylabel([{'True'}; {'Spike Train'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
        set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%,'color',col(2,:),'fontsize',yfs);%,'Interpreter','latex','FontName','Arial')
    end
    set(gca,'YTick',[0 1 2 3])
    axis([0 5 0 3])
    xlabel('Time (sec)')

    % dF/F and threshold guess of spike train (and smoothed)
    subplot(Nrows,Ncols,j+4), hold on, bar(Sim.tvec,thr_n,'FaceColor','r','EdgeColor','r'), 
    subplot(Nrows,Ncols,j+4), plot(Sim.tvec, smooth_thr_n,'r'), hold off, 
    if j==1
        ylab=ylabel([{'dF and'}; {'threshold'}],'Interpreter','latex');%,'VerticalAlignment','middle');%,'FontName','Times New Roman');
        set(ylab,'Rotation',0,'HorizontalAlignment','right','verticalalignment','middle')%,'color',col(2,:),'fontsize',yfs);%,'Interpreter','latex','FontName','Arial')
    end
    set(gca,'XTickLabel',[])%,'YTick',[0 1 2 3])
    axis([0 5 0 3])
end


fig=figure(3);
wh=[5 3];   %width and height
set(fig,'PaperPosition',[0 11-wh(2) wh]);
print -depsc C:\D\working_copies\neur_ca_imag\trunk\janelia_talk\thr_sp2