function S = smc_em_bern_stratresamp_v2(Sim,S,k,U_resamp)
% this function does stratified resampling for neuron models with spike
% history terms
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Sim   :    simulation parameters (eg, dt, N, etc.)
% S         : simulation states (eg, n, lambda, C, h)
% k         : current time step index
% U_resamp  : resampling matrix (generated so that i needed 
% 
% and then i pass in U_resamp and Nresamp to this function.  this speeds
% things up so i don't need to generate random numbers with each sample
% time.
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% outputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% S: this has particle states having resampled


% 0) Compute N_{eff}, just for record keeping
S.Neff(k/Sim.frac)  = 1/sum(S.w_f(:,k).^2); 

% 1) re-sort to avoid bias due to ordering        
new_ind     = randperm(Sim.N);
S.p(:,k)    = S.p(new_ind,k);
S.I(:,k)    = S.I(new_ind,k);
S.C(:,k)    = S.C(new_ind,k);
S.w_f(:,k)  = S.w_f(new_ind,k);
if Sim.M>0
    S.h(:,k,:) = S.h(new_ind,k,:);
end
    
% 2) compute cumulative weights
cum_w   = cumsum(S.w_f(:,k));                   %get cumulative sum of weights for sampling purposese

% 3) resample
Nresamp=Nresamp+1;                              %increase sample counter
for n=1:Sim.N                                   %for each particle
    Nparticle   = find(U_resamp(Nresamp,n)<cum_w,1);%sample
    S.p(n,k)    = S.p(Nparticle,k);             %resample rate
    S.I(n,k)    = S.I(Nparticle,k);             %resample n
    S.C(n,k)    = S.C(Nparticle,k);             %resample C
    if Sim.M>0                                  %if spike history terms
        S.h(n,k,:) = S.h(Nparticle,k,:);        %resample all h's
    end
end
S.w_f(:,k)=(1/Sim.N)*ones(Sim.N,1);             %reset weights